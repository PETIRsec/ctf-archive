from flask import Flask, jsonify, render_template, session
from threading import Timer
import time
import random
import secrets
import stat
import os
from dotenv import load_dotenv

load_dotenv()

DURATION = 15 * 60 * 1000
PORT_RANGE_START = 12000
PORT_RANGE_END = 13000

instances = {}
used_ports = set()

chall_start_path = os.path.join(os.getcwd(), 'chall/start.sh')
chall_stop_path = os.path.join(os.getcwd(), 'chall/stop.sh')

app = Flask(__name__)
app.config['SECRET_KEY'] = secrets.token_hex(32)
app.config['SESSION_COOKIE_NAME'] = secrets.token_hex(32)
is_development = os.getenv('ENV') == 'development'
domain = 'http://188.166.249.196' if not is_development else 'http://152.42.214.231'

def generate_random_port():
    while True:
        port = random.randint(PORT_RANGE_START, PORT_RANGE_END)
        if port not in used_ports:
            used_ports.add(port)
            return port

def release_port(port):
    used_ports.remove(port)

def start_instance(port):
    instance_id = f'free-flag-{port}'

    os.chmod(chall_start_path, stat.S_IRWXU)

    result = os.system(f'"{chall_start_path}" {port} {instance_id}')

    if result != 0:
        return None, 'Failed to start new instance'

    return instance_id, None

def stop_instance(port, instance_id, user_id):
    os.chmod(chall_stop_path, stat.S_IRWXU)

    result = os.system(f'"{chall_stop_path}" {port} {instance_id}')

    if result != 0:
        return None, 'Failed to stop instance'
        
    del instances[user_id]

    return instance_id, None

def get_session():
    user_id = session.get('user_id')

    if not user_id:
        user_id = str(random.randint(100000, 999999))
        session['user_id'] = user_id
    
    return user_id

@app.route('/')
def index():
    user_id = get_session()
    instance = instances.get(user_id)
    now = round(time.time() * 1000)

    if instance != None and instance['end_time'] <= now:
        instance = None

    return render_template('index.html', instance=instance)

@app.route('/start_instance', methods=['POST'])
def start_instance_route():
    user_id = get_session()

    if user_id in instances:
        return jsonify({"error": "You already have a running instance."}), 400

    port = generate_random_port()
    instance_id, err = start_instance(port)

    if err:
        return jsonify({"error": err}), 500

    end_time = round(time.time() * 1000) + DURATION
    
    instances[user_id] = {"instance_id": instance_id, "port": port, "end_time": end_time, "url": f"{domain}:{port}"}
    Timer((float(DURATION/1000)), stop_instance, (port, instance_id, user_id)).start()
    
    return jsonify(instances[user_id])


@app.route('/stop_instance', methods=['POST'])
def stop_instance_route():
    user_id = get_session()

    if user_id not in instances:
        return jsonify({"error": "No running instance found for the user."}), 400

    instance = instances[user_id]

    port = instance['port']
    instance_id = instance['instance_id']

    _, err = stop_instance(port, instance_id, user_id)

    if err:
        return jsonify({"error": err}), 500

    return jsonify({"message": "stopped"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10420, debug=is_development)